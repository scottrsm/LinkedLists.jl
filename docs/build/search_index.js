var documenterSearchIndex = {"docs":
[{"location":"#LinkedLists.jl-Documentation","page":"LinkedLists.jl Documentation","title":"LinkedLists.jl Documentation","text":"","category":"section"},{"location":"","page":"LinkedLists.jl Documentation","title":"LinkedLists.jl Documentation","text":"CurrentModule = LinkedLists","category":"page"},{"location":"#Overview","page":"LinkedLists.jl Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"LinkedLists.jl Documentation","title":"LinkedLists.jl Documentation","text":"This module contains the structure for (Single) Linked Lists. Additionally, public constructors as well as overloaded functions to work with the iterator protocol, the show method,  and the functions push! and pop!.","category":"page"},{"location":"","page":"LinkedLists.jl Documentation","title":"LinkedLists.jl Documentation","text":"The Base::show function has also been overloaded.","category":"page"},{"location":"#Types","page":"LinkedLists.jl Documentation","title":"Types","text":"","category":"section"},{"location":"","page":"LinkedLists.jl Documentation","title":"LinkedLists.jl Documentation","text":"LinkedList{T} ","category":"page"},{"location":"#LinkedLists.LinkedList","page":"LinkedLists.jl Documentation","title":"LinkedLists.LinkedList","text":"LinkedList{T}\n\nFields\n\nhead::ILinkedList{T} – An internal linked list.\n\n\n\n\n\n","category":"type"},{"location":"#Alternative-LinkedList-Constructors","page":"LinkedLists.jl Documentation","title":"Alternative LinkedList Constructors","text":"","category":"section"},{"location":"","page":"LinkedLists.jl Documentation","title":"LinkedLists.jl Documentation","text":"LinkedList(::Type{T}) where T\nLinkedList(l::LinkedList{T}) where T\nLinkedList(v::T)  where T","category":"page"},{"location":"#LinkedLists.LinkedList-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"LinkedLists.jl Documentation","title":"LinkedLists.LinkedList","text":"LinkedList(::Type{T})\n\nCreates an empty LinkedList of type T.\n\nArguments\n\n::Type{T} – The Type of the LinkedList.\n\nReturn\n\nEmpty LinkedList of type T.\n\n\n\n\n\nLinkedList(l::LinkedList{T})\n\nCreates a LinkedList which shares the internal list of another LinkedList.\n\nNote: This means that using push! or pop! on one LinkedList will effect the other LinkedList.\n\nNote: If ys = LinkedList(xs) where xs is a LinkedList, then if one  pop!'s xs to exhaustion, ys will have one element. That is, pop! will  will leave one element left in ys.\n\nArguments\n\nl::LinkedList{T} – Shared LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\nLinkedList(v::T)\n\nCreates a LinkedList containing a single element, v, of type T.\n\nArguments\n\nv::T – The sole element of this LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\nLinkedList(v::Vector{T})\n\nCreates a LinkedList containing the elements from a Vector of type T. The elements of the resulting LinkedList will be in the same order  as the vector.\n\nArguments\n\nv::Vector{T} – The elements of this LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\n","category":"method"},{"location":"#LinkedLists.LinkedList-Union{Tuple{LinkedList{T}}, Tuple{T}} where T","page":"LinkedLists.jl Documentation","title":"LinkedLists.LinkedList","text":"LinkedList(::Type{T})\n\nCreates an empty LinkedList of type T.\n\nArguments\n\n::Type{T} – The Type of the LinkedList.\n\nReturn\n\nEmpty LinkedList of type T.\n\n\n\n\n\nLinkedList(l::LinkedList{T})\n\nCreates a LinkedList which shares the internal list of another LinkedList.\n\nNote: This means that using push! or pop! on one LinkedList will effect the other LinkedList.\n\nNote: If ys = LinkedList(xs) where xs is a LinkedList, then if one  pop!'s xs to exhaustion, ys will have one element. That is, pop! will  will leave one element left in ys.\n\nArguments\n\nl::LinkedList{T} – Shared LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\nLinkedList(v::T)\n\nCreates a LinkedList containing a single element, v, of type T.\n\nArguments\n\nv::T – The sole element of this LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\nLinkedList(v::Vector{T})\n\nCreates a LinkedList containing the elements from a Vector of type T. The elements of the resulting LinkedList will be in the same order  as the vector.\n\nArguments\n\nv::Vector{T} – The elements of this LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\n","category":"method"},{"location":"#LinkedLists.LinkedList-Tuple{T} where T","page":"LinkedLists.jl Documentation","title":"LinkedLists.LinkedList","text":"LinkedList(::Type{T})\n\nCreates an empty LinkedList of type T.\n\nArguments\n\n::Type{T} – The Type of the LinkedList.\n\nReturn\n\nEmpty LinkedList of type T.\n\n\n\n\n\nLinkedList(l::LinkedList{T})\n\nCreates a LinkedList which shares the internal list of another LinkedList.\n\nNote: This means that using push! or pop! on one LinkedList will effect the other LinkedList.\n\nNote: If ys = LinkedList(xs) where xs is a LinkedList, then if one  pop!'s xs to exhaustion, ys will have one element. That is, pop! will  will leave one element left in ys.\n\nArguments\n\nl::LinkedList{T} – Shared LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\nLinkedList(v::T)\n\nCreates a LinkedList containing a single element, v, of type T.\n\nArguments\n\nv::T – The sole element of this LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\nLinkedList(v::Vector{T})\n\nCreates a LinkedList containing the elements from a Vector of type T. The elements of the resulting LinkedList will be in the same order  as the vector.\n\nArguments\n\nv::Vector{T} – The elements of this LinkedList.\n\nReturn\n\nLinkedList of type T.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"LinkedLists.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"LinkedLists.jl Documentation","title":"LinkedLists.jl Documentation","text":"","category":"page"}]
}
